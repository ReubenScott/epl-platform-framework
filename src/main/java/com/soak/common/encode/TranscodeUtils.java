package com.soak.common.encode;import java.util.Locale;/** * <pre> * 编码 转换 */public class TranscodeUtils {  /**   * Convert byte[] to hex string.   *    * bytes转换成十六进制字符串   *    * 这里我们可以将byte转换成int，然后利用Integer.toHexString(int)来转换成16进制字符串。   *    * @param b   *          byte[] data byte数组   * @return hex string   */  public static String bytesToHexStr(byte... b) {    StringBuilder sb = new StringBuilder("");    for (int i = 0; i < b.length; i++) {      String hv = Integer.toHexString(b[i] & 0xFF);      sb.append((hv.length() == 1) ? "0" + hv : hv);      // sb.append(' '); // 是否要 每个Byte值之间空格分隔    }    return sb.toString().toUpperCase().trim();  }  /**   * bytes字符串转换为Byte值   *    * @param String   *          src Byte字符串，每个Byte之间没有分隔符   * @return byte[]   */  public static byte[] hexStrToBytes(String hexstr) {    int m = 0, n = 0;    int l = hexstr.length() / 2;    byte[] ret = new byte[l];    for (int i = 0; i < l; i++) {      m = i * 2 + 1;      n = m + 1;      ret[i] = Byte.decode("0x" + hexstr.substring(i * 2, m) + hexstr.substring(m, n));    }    return ret;  }  /**   * unicode的String转换成String的字符串   *    * @param hex   *          String 16进制值字符串 （一个unicode为2byte）   * @return String 全角字符串   * @see CHexConver.unicodeToString("\\u0068\\u0065\\u006c\\u006c\\u006f")   */  public static String unicodeToString(String hex) {    int t = hex.length() / 6;    StringBuilder str = new StringBuilder();    for (int i = 0; i < t; i++) {      String s = hex.substring(i * 6, (i + 1) * 6);      // 将16进制的string转为int; 低位直接转 ;高位需要补上00再转      int point = (Integer.valueOf(s.substring(2, 4), 16) << 8) | Integer.valueOf(s.substring(4), 16);      // 将int转换为字符      str.append(new String(Character.toChars(point)));    }    return str.toString();  }  /**   * String的字符串转换成unicode的String   *    * @param String   *          strText 全角字符串   * @return String 每个unicode之间无分隔符   * @throws Exception   */  public static String strToUnicode(String strText) {    char c;    StringBuilder str = new StringBuilder();    int intAsc;    String strHex;    for (int i = 0; i < strText.length(); i++) {      c = strText.charAt(i);      intAsc = (int) c;      strHex = Integer.toHexString(intAsc);      if (intAsc > 128) {        str.append("\\u");      } else {        // 低位在前面补00        str.append("\\u00");      }      str.append(strHex);    }    return str.toString();  }  // 以下未测试 ×××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××  /**   * 字符串转换成十六进制字符串   *    * @param String   *          str 待转换的ASCII字符串   * @return String 每个Byte之间空格分隔，如: [61 6C 6B]   */  public static String str2HexStr(String str) {    char[] chars = "0123456789ABCDEF".toCharArray();    StringBuilder sb = new StringBuilder("");    byte[] bs = str.getBytes();    int bit;    for (int i = 0; i < bs.length; i++) {      bit = (bs[i] & 0x0f0) >> 4;      sb.append(chars[bit]);      bit = bs[i] & 0x0f;      sb.append(chars[bit]);      sb.append(' ');    }    return sb.toString().trim();  }  /**   * 十六进制转换字符串   *    * @param String   *          str Byte字符串(Byte之间无分隔符 如:[616C6B])   * @return String 对应的字符串   */  public static String hexToStr(String hexStr) {    String str = "0123456789ABCDEF";    char[] hexs = hexStr.toCharArray();    byte[] bytes = new byte[hexStr.length() / 2];    int n;    for (int i = 0; i < bytes.length; i++) {      n = str.indexOf(hexs[2 * i]) * 16;      n += str.indexOf(hexs[2 * i + 1]);      bytes[i] = (byte) (n & 0xff);    }    return new String(bytes);  }  /**   * 检查16进制字符串是否有效   *    * @param sHex   *          String 16进制字符串   * @return boolean   */  public static boolean checkHexStr(String sHex) {    String sTmp = sHex.toString().trim().replace(" ", "").toUpperCase(Locale.US);    int iLen = sTmp.length();    if (iLen > 1 && iLen % 2 == 0) {      for (int i = 0; i < iLen; i++)        if (!"0123456789ABCDEF".contains(sTmp.substring(i, i + 1)))          return false;      return true;    } else      return false;  }  /**   * 十六进制字符串转换成 ASCII字符串   *    * @param str   *          String Byte字符串   * @return String 对应的字符串   */  public static String hexStr2Str(String hexStr) {    hexStr = hexStr.toString().trim().replace(" ", "").toUpperCase(Locale.US);    char[] hexs = hexStr.toCharArray();    byte[] bytes = new byte[hexStr.length() / 2];    int iTmp = 0x00;    ;    for (int i = 0; i < bytes.length; i++) {      iTmp = "0123456789ABCDEF".indexOf(hexs[2 * i]) << 4;      iTmp |= "0123456789ABCDEF".indexOf(hexs[2 * i + 1]);      bytes[i] = (byte) (iTmp & 0xFF);    }    return new String(bytes);  }  /**   * bytes字符串转换为Byte值   *    * @param src   *          String Byte字符串，每个Byte之间没有分隔符(字符范围:0-9 A-F)   * @return byte[]   */  public static byte[] hexStr2Bytes(String src) {    /* 对输入值进行规范化整理 */    src = src.trim().replace(" ", "").toUpperCase(Locale.US);    // 处理值初始化    int m = 0, n = 0;    int iLen = src.length() / 2; // 计算长度    byte[] ret = new byte[iLen]; // 分配存储空间    for (int i = 0; i < iLen; i++) {      m = i * 2 + 1;      n = m + 1;      ret[i] = (byte) (Integer.decode("0x" + src.substring(i * 2, m) + src.substring(m, n)) & 0xFF);    }    return ret;  }  public static void main(String[] args) {    String hex = "ef2c71b29202f3e642f2abd8d518f367ec3fbf6a6a61beb678ae0c871ee368ac";    System.out.println(TranscodeUtils.hexToStr(hex));  }}