package com.soak.framework.util;

import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Collections;
import java.util.Date;
import java.util.List;

/**
 * DATE 继承于 java.util.Date，多实现了很多方法。
 * 
 * @author 沙琪玛 QQ：862990787 May 29, 2013 9:52:51 AM
 */
public class DateUtil_bak {

  /**
     *
     */
  private static final long serialVersionUID = 2155545266875552658L;

  // 获得当前时间一个月前的时间
  public static String getOneMonthBeforeCurrentTime() {
    Calendar cal = Calendar.getInstance();
    cal.add(cal.MONTH, -1);

    return "" + cal.getTime();
  }

  // 获得当前时间一个月后的时间
  public static String getOneMonthAfterCurrentTime() {
    Calendar cal = Calendar.getInstance();
    cal.add(cal.MONTH, 1);
    return "" + cal.getTime();
  }




  /**
   * 功能：将当前日期的月进行重新设置。
   * 
   * @author 沙琪玛 QQ：862990787 Jul 31, 2013 2:42:36 PM
   * @param months
   *          某一月
   * @return 设置后的日期
   */
  public Date setMonthNew(int month) {
    Calendar c = Calendar.getInstance();
    c.set(Calendar.MONTH, month - 1);
    return new Date(c.getTimeInMillis());
  }

  /**
   * 功能：将当前日期的年进行重新设置。
   * 
   * @author 沙琪玛 QQ：862990787 Jul 31, 2013 2:42:36 PM
   * @param years
   *          某一年
   * @return 设置后的日期
   */
  public Date setYearNew(int year) {
    Calendar c = Calendar.getInstance();
    c.set(Calendar.YEAR, year);
    return new Date(c.getTimeInMillis());
  }

  /**
   * 功能：当前时间增加毫秒数。
   * 
   * @author 沙琪玛 QQ：862990787 May 29, 2013 11:26:27 AM
   * @param milliseconds
   *          正值时时间延后，负值时时间提前。
   * @return Date
   */
  public Date addMilliseconds(int milliseconds) {
    Calendar c = Calendar.getInstance();
    c.set(Calendar.MILLISECOND, c.get(Calendar.MILLISECOND) + milliseconds);
    return new Date(c.getTimeInMillis());
  }

  /**
   * 功能：当前时间增加秒数。
   * 
   * @author 沙琪玛 QQ：862990787 May 29, 2013 11:26:27 AM
   * @param seconds
   *          正值时时间延后，负值时时间提前。
   * @return Date
   */
  public Date addSeconds(int seconds) {
    Calendar c = Calendar.getInstance();
    c.set(Calendar.SECOND, c.get(Calendar.SECOND) + seconds);
    return new Date(c.getTimeInMillis());
  }






  /**
   * 得到秒。格式：56<br/>
   * 
   * @return int
   */
  public int secondInt() {
    return Integer.parseInt(toString("ss"));
  }

  /**
   * 得到分钟。格式：56<br/>
   * 
   * @return int
   */
  public int minuteInt() {
    return Integer.parseInt(toString("mm"));
  }

  /**
   * 得到小时。格式：23<br/>
   * 
   * @return int
   */
  public int hourInt() {
    return Integer.parseInt(toString("HH"));
  }

  /**
   * 得到日。格式：26<br/>
   * 注意：这里1日返回1,2日返回2。
   * 
   * @return int
   */
  public int dayInt() {
    return Integer.parseInt(toString("dd"));
  }

  /**
   * 得到月。格式：5<br/>
   * 注意：这里1月返回1,2月返回2。
   * 
   * @return int
   */
  public int monthInt() {
    return Integer.parseInt(toString("MM"));
  }

  /**
   * 得到年。格式：2013
   * 
   * @return int
   */
  public int yearInt() {
    return Integer.parseInt(toString("yyyy"));
  }

  /**
   * 得到短时间。格式：12:01
   * 
   * @return String
   */
  public String shortTime() {
    return toString("HH:mm");
  }

  /**
   * 得到长时间。格式：12:01:01
   * 
   * @return String
   */
  public String longTime() {
    return toString("HH:mm:ss");
  }

  /**
   * 得到今天的第一秒的时间。
   * 
   * @return Date
   */
  public Date dayStart() {
    Calendar c = Calendar.getInstance();
    c.set(Calendar.HOUR_OF_DAY, 0);
    c.set(Calendar.MINUTE, 0);
    c.set(Calendar.SECOND, 0);
    return new Date(c.getTimeInMillis());
  }

  /**
   * 得到当前所在自然月的第一天的开始,格式为长日期格式。例如：2012-03-01 00:00:00。
   * 
   * @return Date
   */
  public Date monthStart() {
    Calendar c = Calendar.getInstance();
    String startStr = toString("yyyy-M-") + c.getActualMinimum(Calendar.DATE) + " 00:00:00";

    return null;
    // return new Date(startStr);
  }

  /**
   * 得到今天的最后一秒的时间。
   * 
   * @return Date
   */
  public Date dayEnd() {
    Calendar c = Calendar.getInstance();
    c.set(Calendar.HOUR_OF_DAY, 23);
    c.set(Calendar.MINUTE, 59);
    c.set(Calendar.SECOND, 59);
    return new Date(c.getTimeInMillis());
  }

  /**
   * 根据日期得到星期几,得到数字。<br/>
   * 7, 1, 2, 3, 4, 5, 6
   * 
   * @return Integer 如：6
   */
  public int dayOfWeekInt() {
    Integer dayNames[] = { 7, 1, 2, 3, 4, 5, 6 };
    Calendar calendar = Calendar.getInstance();
    int dayOfWeek = calendar.get(Calendar.DAY_OF_WEEK) - 1;
    if (dayOfWeek < 0)
      dayOfWeek = 0;
    return dayNames[dayOfWeek];
  }

  /**
   * 将日期转换成长日期字符串 例如：2009-09-09 01:01:01
   * 
   * @return String
   */
  public String toLongDate() {
    DateFormat df = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
    return (null == this) ? null : df.format(this);
  }

  /**
   * 将日期按照一定的格式进行格式化为字符串。<br/>
   * 例如想将时间格式化为2012-03-05 12:56 ,则只需要传入formate为yyyy-MM-dd HH:mm即可。
   * 
   * @param formate
   *          格式化格式，如：yyyy-MM-dd HH:mm
   * @return String 格式后的日期字符串。如果当前对象为null，则直接返回null。
   */
  public String toString(String formate) {
    DateFormat df = new SimpleDateFormat(formate);
    return (null == this) ? null : df.format(this);
  }

  /**
   * 得到某个时间的时间戳yyyyMMddHHmmss。
   * 
   * @param date
   *          时间
   * @return String 如果当前对象为null，则直接返回null。
   */
  public String toTimeStamp() {
    DateFormat df = new SimpleDateFormat("yyyyMMddHHmmss");
    return (null == this) ? null : df.format(this);
  }

  /**
   * 将日期转换成短日期字符串,例如：2009-09-09。
   * 
   * @return String ,如果当前对象为null，返回null。
   */
  public String toShortDate() {
    DateFormat df = new SimpleDateFormat("yyyy-MM-dd");
    return (null == this) ? null : df.format(this);
  }

}